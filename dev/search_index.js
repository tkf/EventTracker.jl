var documenterSearchIndex = {"docs":
[{"location":"gallery/#Gallery","page":"Gallery","title":"Gallery","text":"","category":"section"},{"location":"gallery/#Fibonacci","page":"Gallery","title":"Fibonacci","text":"","category":"section"},{"location":"gallery/#Serial-fibonacci","page":"Gallery","title":"Serial fibonacci","text":"","category":"section"},{"location":"gallery/","page":"Gallery","title":"Gallery","text":"using EventTracker\n\nfunction fib(n)\n    n <= 1 && return n\n    @recordinterval :fib1 a = fib(n - 1)\n    @recordinterval :fib2 b = fib(n - 2)\n    return a + b\nend\n\nEventTracker.clear()\nfib(10)\n\ndf = EventTracker.summary_dataframe()","category":"page"},{"location":"gallery/","page":"Gallery","title":"Gallery","text":"using Plots\nstks = EventTracker.stacks()\nplot(stks)\nsavefig(\"fibonacci-serial-stacks.svg\"); nothing # hide","category":"page"},{"location":"gallery/","page":"Gallery","title":"Gallery","text":"(Image: )","category":"page"},{"location":"gallery/#Parallel-fibonacci","page":"Gallery","title":"Parallel fibonacci","text":"","category":"section"},{"location":"gallery/","page":"Gallery","title":"Gallery","text":"using EventTracker\n\nfunction fib(n)\n    n <= 1 && return n\n    t = @async begin\n        rand(Bool) && yield()  # introduce more task jugglings\n        @recordinterval :fib1 local a = fib(n - 1)\n        a\n    end\n    @recordinterval :fib2 b = fib(n - 2)\n    return (fetch(t)::Int) + b\nend\nnothing # hide","category":"page"},{"location":"gallery/","page":"Gallery","title":"Gallery","text":"function withspin(f)\n    done = Threads.Atomic{Bool}(false)\n    @sync begin\n        Threads.@spawn begin\n            while !done[]\n                @recordpoint :spin\n                yield()\n            end\n        end\n        try\n            f()\n        finally\n            done[] = true\n        end\n    end\nend\n\nfunction run_fibs_with_spin(nums)\n    withspin() do\n        for n in nums\n            fib(n)\n        end\n    end\nend\nrun_fibs_with_spin([5, 6, 7])  # invoke compilation\nnothing # hide","category":"page"},{"location":"gallery/","page":"Gallery","title":"Gallery","text":"EventTracker.clear()\nrun_fibs_with_spin([5, 6, 7])\n\ndf = EventTracker.summary_dataframe()","category":"page"},{"location":"gallery/","page":"Gallery","title":"Gallery","text":"using Plots\nstks = EventTracker.stacks()\nplot(stks)\nsavefig(\"fibonacci-spin-stacks.svg\"); nothing # hide","category":"page"},{"location":"gallery/","page":"Gallery","title":"Gallery","text":"(Image: )","category":"page"},{"location":"gallery/#Tarai","page":"Gallery","title":"Tarai","text":"","category":"section"},{"location":"gallery/","page":"Gallery","title":"Gallery","text":"Ref: Tak (function) - Wikipedia","category":"page"},{"location":"gallery/","page":"Gallery","title":"Gallery","text":"using EventTracker\n\nfunction tarai(x, y, z)\n    @recordinterval result = if y < x\n        tarai(\n            tarai(x - 1, y, z),\n            tarai(y - 1, z, x),\n            tarai(z - 1, x, y),\n        )\n    else\n        @recordpoint\n        y\n    end\n    return result\nend\n\nEventTracker.clear()\ntarai(3, 1, 7)\ndf = EventTracker.summary_dataframe()","category":"page"},{"location":"gallery/","page":"Gallery","title":"Gallery","text":"using Plots\nstks = EventTracker.stacks()\nplot(stks)\nsavefig(\"tarai-serial-stacks.png\"); nothing # hide","category":"page"},{"location":"gallery/","page":"Gallery","title":"Gallery","text":"(Image: )","category":"page"},{"location":"#EventTracker.jl","page":"EventTracker.jl","title":"EventTracker.jl","text":"","category":"section"},{"location":"","page":"EventTracker.jl","title":"EventTracker.jl","text":"See Gallery for examples.","category":"page"},{"location":"#Recording-API","page":"EventTracker.jl","title":"Recording API","text":"","category":"section"},{"location":"","page":"EventTracker.jl","title":"EventTracker.jl","text":"Recording API is defined in EventTrackerBase.jl and re-exported from EventTracker.jl.","category":"page"},{"location":"","page":"EventTracker.jl","title":"EventTracker.jl","text":"EventTrackerBase.@recordinterval\nEventTrackerBase.@recordpoint\nEventTrackerBase.clear","category":"page"},{"location":"#EventTrackerBase.@recordinterval","page":"EventTracker.jl","title":"EventTrackerBase.@recordinterval","text":"@recordinterval(tag, code) -> handle\n@recordinterval(code) -> handle\n\nRecord the start and stop times for executing code.\n\ntag must be a literal symbol; i.e., @recordinterval :my_tag ... instead of @recordinterval my_tag ....\n\nExamples\n\njulia> using EventTrackerBase\n\njulia> @recordinterval begin\n           sleep(0.01)\n           a = 1\n       end;\n\njulia> a\n1\n\nThe timing can now be printed with using EventTracker then EventTracker.summary().\n\n\n\n\n\n","category":"macro"},{"location":"#EventTrackerBase.@recordpoint","page":"EventTracker.jl","title":"EventTrackerBase.@recordpoint","text":"@recordpoint(tag) -> handle\n@recordpoint() -> handle\n\nRecord the times this part of code is executed.\n\n\n\n\n\n","category":"macro"},{"location":"#EventTrackerBase.clear","page":"EventTracker.jl","title":"EventTrackerBase.clear","text":"EventTracker.clear()\n\nClear all records. The caller must ensure that no recordings are happening concurrently.\n\n\n\n\n\n","category":"function"},{"location":"#Analysis-API","page":"EventTracker.jl","title":"Analysis API","text":"","category":"section"},{"location":"","page":"EventTracker.jl","title":"EventTracker.jl","text":"EventTracker.summary\nEventTracker.summary_dataframe\nEventTracker.event_dataframe\nEventTracker.event_table\nEventTracker.location_dataframe\nEventTracker.location_table\nEventTracker.stacks","category":"page"},{"location":"#EventTracker.summary","page":"EventTracker.jl","title":"EventTracker.summary","text":"EventTracker.summary()\n\nCompute and print the summary. Currently just pints EventTracker.summary_dataframe.\n\n\n\n\n\n","category":"function"},{"location":"#EventTracker.summary_dataframe","page":"EventTracker.jl","title":"EventTracker.summary_dataframe","text":"EventTracker.summary_dataframe(; owntime = false)\n\nCompute the summary of the events.\n\nIt computes the summary statistics of the events for each location and join the location information.\n\n\n\n\n\n","category":"function"},{"location":"#EventTracker.event_dataframe","page":"EventTracker.jl","title":"EventTracker.event_dataframe","text":"EventTracker.event_dataframe(; owntime = false)\n\nExport tracked events as a DataFrame. If owntime = true is passed, include owntime column by analyzing the nesting of the intervals and compute the during excluding the time spent in the sub-intervals.\n\n\n\n\n\n","category":"function"},{"location":"#EventTracker.event_table","page":"EventTracker.jl","title":"EventTracker.event_table","text":"EventTracker.event_table()\n\nExport tracked events as a table.\n\n\n\n\n\n","category":"function"},{"location":"#EventTracker.location_dataframe","page":"EventTracker.jl","title":"EventTracker.location_dataframe","text":"EventTracker.location_dataframe()\n\nExport tracked locations as a DataFrame.\n\n\n\n\n\n","category":"function"},{"location":"#EventTracker.location_table","page":"EventTracker.jl","title":"EventTracker.location_table","text":"EventTracker.location_table()\n\nExport tracked locations as a table.\n\n\n\n\n\n","category":"function"},{"location":"#EventTracker.stacks","page":"EventTracker.jl","title":"EventTracker.stacks","text":"EventTracker.stacks()\n\nAnalyze nestings of the recorded intervals to recover the \"call trees\" of the functions instrumented with @recordinterval macro.\n\nCurrently, the returned object only supports Plots.plot API.\n\n\n\n\n\n","category":"function"}]
}
